/*****************************************************************************
 *   adctest.c:  main C entry file for NXP LPC11xx Family Microprocessors
 *
 *   Copyright(C) 2008, NXP Semiconductor
 *   All rights reserved.
 *
 *   History
 *   2009.12.07  ver 1.00    Preliminary version, first Release
 *
******************************************************************************/
/*****************************************************************************
 *   adctest.c:  main C entry file for NXP LPC11xx Family Microprocessors
 *
 *   Copyright(C) 2008, NXP Semiconductor
 *   All rights reserved.
 *
 *   History
 *   2009.12.07  ver 1.00    Preliminary version, first Release
 *
******************************************************************************/
#include "driver_config.h"
#include "target_config.h"

#include "adc.h"
#include "debug_printf.h"
#include "timer32.h"
#include "gpio.h"


#define HALF_VCC_ADC_512				512
#define ADC_TOLERANCE					10 // SO 512-10 = 502 IS THE LOW AND 522 IS THE HIGH

/******************************************************************************
**   Main Function  main()
******************************************************************************/
int main (void)
{

	uint8_t hit =  0;// hit rate, essentially zero crossing
	init_timer32(0, TIME_INTERVAL); //60Mhz gives 10ms
	enable_timer32(0); //will use later to calculate the frequency. 
	GPIOInit();
	GPIOSetDir(LED_PORT_B, LED_BIT_B, 1);
	GPIOSetValue(LED_PORT_B, LED_BIT_B, LED_OFF);

	

	 /* Basic chip initialization is taken care of in SystemInit() called
	   * from the startup code. SystemInit() and chip settings are defined
	   * in the CMSIS system_<part family>.c file.
	   */

  /* Initialize ADC  */
ADCInit( ADC_CLK );

  /* LED Initialization code here */


  while(1)
  {
	/* Read one sample from the ADC port 'AD0' */
	  ADCRead( 0 );
	while ( !ADCIntDone );
	ADCIntDone = 0;
	/* LED lighting and analog signal frequency calculation and printing code here */

	uint32_t adcValue = ADCValue[0];
	if( adcValue >= HALF_VCC_ADC_512) {
		GPIOSetValue(LED_PORT_B, LED_BIT_B, LED_ON);
	}
	GPIOSetValue(LED_PORT_B, LED_BIT_B, LED_OFF);


	if((ADCValue[0] <= (HALF_VCC_ADC_512 + adcTolerance) )&& (ADCValue[0] >= (HALF_VCC_ADC_512 - adcTolerance)) )


	if(timer32_0_counter > 200){
		GPIOSetValue(LED_PORT_B, LED_BIT_B, LED_ON);	
		
		}
	if(timer32_0_counter > 400){
		GPIOSetValue(LED_PORT_B, LED_BIT_B, LED_OFF);	
		timer32_0_counter=0;
		}


  }
}

/******************************************************************************
**                            End Of File
******************************************************************************/
