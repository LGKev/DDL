
Memory Configuration

Name             Origin             Length             Attributes
MFlash64         0x00000000         0x00010000         xr
RamLoc8          0x10000000         0x00002000         xrw
*default*        0x00000000         0xffffffff

Linker script and memory map

START GROUP
LOAD c:/nxp/lpcxpresso_8.2.2_650/lpcxpresso/tools/bin/../lib/gcc/arm-none-eabi/5.4.1/../../../../arm-none-eabi/lib/armv6-m\libcr_c.a
LOAD c:/nxp/lpcxpresso_8.2.2_650/lpcxpresso/tools/bin/../lib/gcc/arm-none-eabi/5.4.1/armv6-m\libcr_eabihelpers.a
END GROUP
                0x00000000                __base_MFlash64 = 0x0
                0x00000000                __base_Flash = 0x0
                0x00010000                __top_MFlash64 = 0x10000
                0x00010000                __top_Flash = 0x10000
                0x10000000                __base_RamLoc8 = 0x10000000
                0x10000000                __base_RAM = 0x10000000
                0x10002000                __top_RamLoc8 = 0x10002000
                0x10002000                __top_RAM = 0x10002000

.text           0x00000000      0x2fc
 FILL mask 0xff
                0x00000000                __vectors_start__ = ABSOLUTE (.)
 *(.isr_vector)
                0x00000000                . = ALIGN (0x4)
                0x00000000                __section_table_start = .
                0x00000000                __data_section_table = .
                0x00000000        0x4 LONG 0x2fc LOADADDR (.data)
                0x00000004        0x4 LONG 0x10000000 ADDR (.data)
                0x00000008        0x4 LONG 0x0 SIZEOF (.data)
                0x0000000c                __data_section_table_end = .
                0x0000000c                __bss_section_table = .
                0x0000000c        0x4 LONG 0x10000000 ADDR (.bss)
                0x00000010        0x4 LONG 0x0 SIZEOF (.bss)
                0x00000014                __bss_section_table_end = .
                0x00000014                __section_table_end = .
 *(.after_vectors*)
                0x000002fc                . = 0x2fc
 *fill*         0x00000014      0x2e8 ff
                0x000002fc                PROVIDE (__CRP_WORD_START__, .)
 *(.crp)
                0x000002fc                PROVIDE (__CRP_WORD_END__, .)
                0x00000000                ASSERT (! ((__CRP_WORD_START__ == __CRP_WORD_END__)), Linker CRP Enabled, but no CRP_WORD provided within application)
 *(.text*)
 *(.rodata .rodata.* .constdata .constdata.*)
                0x000002fc                . = ALIGN (0x4)

.glue_7         0x000002fc        0x0
 .glue_7        0x000002fc        0x0 linker stubs

.glue_7t        0x000002fc        0x0
 .glue_7t       0x000002fc        0x0 linker stubs

.vfp11_veneer   0x000002fc        0x0
 .vfp11_veneer  0x000002fc        0x0 linker stubs

.v4_bx          0x000002fc        0x0
 .v4_bx         0x000002fc        0x0 linker stubs

.ARM.extab
 *(.ARM.extab* .gnu.linkonce.armextab.*)
                0x000002fc                __exidx_start = .

.ARM.exidx
 *(.ARM.exidx* .gnu.linkonce.armexidx.*)
                0x000002fc                __exidx_end = .
                0x000002fc                _etext = .

.uninit_RESERVED
                0x10000000        0x0
 *(.bss.$RESERVED*)
                0x10000000                . = ALIGN (0x4)
                0x10000000                _end_uninit_RESERVED = .

.data           0x10000000        0x0 load address 0x000002fc
 FILL mask 0xff
                0x10000000                _data = .
 *(vtable)
 *(.ramfunc*)
 *(.data*)
                0x10000000                . = ALIGN (0x4)
                0x10000000                _edata = .

.bss            0x10000000        0x0 load address 0x000002fc
                0x10000000                _bss = .
 *(.bss*)
 *(COMMON)
                0x10000000                . = ALIGN (0x4)
                0x10000000                _ebss = .
                [!provide]                PROVIDE (end, .)

.noinit         0x10000000        0x0 load address 0x000002fc
                0x10000000                _noinit = .
 *(.noinit*)
                0x10000000                . = ALIGN (0x4)
                0x10000000                _end_noinit = .
                [!provide]                PROVIDE (_pvHeapStart, DEFINED (__user_heap_base)?__user_heap_base:.)
                [!provide]                PROVIDE (_vStackTop, DEFINED (__user_stack_top)?__user_stack_top:(__top_RamLoc8 - 0x0))
                [!provide]                PROVIDE (__valid_user_code_checksum, (0x0 - (((_vStackTop + (ResetISR + 0x1)) + (DEFINED (NMI_Handler)?NMI_Handler:M0_NMI_Handler + 0x1)) + (DEFINED (HardFault_Handler)?HardFault_Handler:M0_HardFault_Handler + 0x1))))
OUTPUT(a.out elf32-littlearm)
